(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9291],{9066:function(e,s,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/usage",function(){return t(3958)}])},3830:function(e,s,t){"use strict";var n=t(5893);t(7294);s.Z=function(e){var s=e.children;return(0,n.jsx)("h1",{className:"font-extralight",children:s})}},1590:function(e,s,t){"use strict";var n=t(5893);t(7294);s.Z=function(e){var s=e.children;return(0,n.jsx)("p",{className:"mb-4 p-4 bg-gray-100 rounded",style:{overflow:"auto"},children:(0,n.jsx)("small",{children:(0,n.jsx)("code",{className:"text-black",style:{whiteSpace:"pre"},children:s})})})}},6734:function(e,s,t){"use strict";var n=t(5893);t(7294);s.Z=function(e){var s=e.children;return(0,n.jsx)("small",{children:(0,n.jsx)("code",{className:"text-black bg-gray-100 p-1 rounded",style:{whiteSpace:"nowrap"},children:s})})}},4743:function(e,s,t){"use strict";t.d(s,{Z:function(){return h}});var n=t(5893),l=t(9008),i=t.n(l),r=t(7294),c=t(1664),o=t.n(c),a=function(){return(0,n.jsx)(o(),{href:"/",children:(0,n.jsxs)("a",{style:{fontSize:"20px",fontWeight:"200",lineHeight:1,whiteSpace:"nowrap",display:"flex",flexDirection:"row",alignItems:"center"},children:[(0,n.jsx)("span",{children:"react-native-"}),(0,n.jsx)("img",{alt:"stylo",src:"".concat("/react-native-stylo-documentation","/logo.png"),style:{height:"28px"}})]})})},h=function(e){var s=e.renderNavigation,t=e.renderContent;return(0,n.jsxs)(r.Fragment,{children:[(0,n.jsxs)(i(),{children:[(0,n.jsx)("title",{children:"React Native Stylo"}),(0,n.jsx)("meta",{name:"description",content:"Completely detached and highly scalable React Native styles"}),(0,n.jsx)("link",{rel:"icon",href:"".concat("/react-native-stylo-documentation","/favicon.ico")})]}),(0,n.jsx)("div",{className:"lg:container lg:mx-auto flex flex-col",children:(0,n.jsxs)("div",{className:"grid grid-cols-7 xl:grid-cols-5 grid-flow-col",children:[(0,n.jsxs)("div",{className:"p-4 col-span-2 xl:col-span-1",children:[(0,n.jsx)("div",{className:"mt-4 mb-8",children:(0,n.jsx)(a,{})}),s()]}),(0,n.jsx)("main",{className:"border-l p-4 col-span-5 xl:col-span-4",style:{minHeight:"100vh"},children:t()})]})})]})}},7370:function(e,s,t){"use strict";var n=t(5893),l=(t(7294),t(5565));s.Z=function(){return(0,n.jsx)("nav",{children:(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsxs)("ul",{className:"mb-8",children:[(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/",children:"Core concept"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/usage",children:"Usage"})})]})}),(0,n.jsxs)("li",{children:[(0,n.jsx)("h5",{className:"text-base m-0",children:"Core members"}),(0,n.jsxs)("ul",{className:"mb-8",children:[(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/use-styles",children:"useStyles()"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/styles",children:"<Styles />"})})]})]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("h5",{className:"text-base m-0",children:"Hooks & components"}),(0,n.jsxs)("ul",{className:"mb-8",children:[(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/theme",children:"Theme"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/theme-provider",children:"<ThemeProvider />"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/use-variables",children:"useVariables()"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/stylish",children:"Stylish"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/stylers",children:"Stylers"})})]})]}),(0,n.jsx)("li",{children:(0,n.jsxs)("ul",{className:"mb-8",children:[(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/default-styles",children:"Default styles"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/style-names-sequence",children:"StyleNames sequence"})}),(0,n.jsx)("li",{children:(0,n.jsx)(l.Z,{href:"/tight-coupling",children:"Tightly coupled"})})]})}),(0,n.jsx)("li",{children:(0,n.jsx)("h5",{className:"text-base m-0",children:(0,n.jsx)(l.Z,{href:"/stylo-theme",children:"Stylo theme"})})})]})})}},5565:function(e,s,t){"use strict";var n=t(5893),l=t(1664),i=t.n(l),r=t(1163);t(7294);s.Z=function(e){var s=e.children,t=e.href,l=(0,r.useRouter)();return(0,n.jsx)(i(),{href:t,children:(0,n.jsx)("a",{className:l.pathname.toLowerCase()===t.toLowerCase()?"font-medium":"text-gray-800",style:{display:"block"},children:s})})}},6900:function(e,s,t){"use strict";var n=t(5893);t(7294);s.Z=function(e){var s=e.children,t=e.className,l=e.style;return(0,n.jsx)("p",{className:"mb-4 ".concat(t),style:l,children:s})}},7687:function(e,s,t){"use strict";var n=t(5893);t(7294);function l(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function i(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{},n=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(s){l(e,s,t[s])}))}return e}s.Z=function(e){var s=e.children,t=e.id,l=e.level,r=function(){return(0,n.jsx)("a",{href:"#".concat(t),children:s})},c={className:"heading",id:t};return 1===l?(0,n.jsx)("h1",i({},c,{children:r()})):2===l?(0,n.jsx)("h2",i({},c,{children:r()})):3===l?(0,n.jsx)("h3",i({},c,{children:r()})):4===l?(0,n.jsx)("h4",i({},c,{children:r()})):(0,n.jsx)("h5",i({},c,{children:r()}))}},8468:function(e,s,t){"use strict";t.d(s,{e:function(){return n},y:function(){return l}});var n="/node_modules/react-native-stylo/lib/stylo",l="/node_modules/react-native-stylo/lib/stylo/themes"},3958:function(e,s,t){"use strict";t.r(s);var n=t(5893),l=t(9008),i=t.n(l),r=t(1664),c=t.n(r),o=t(7294),a=t(3830),h=t(1590),d=t(6734),y=t(4743),m=t(7370),u=t(6900),x=t(7687),f=t(8468),j={id:"installation",title:"Installation"},p={id:"configure-theme-hooks-components",title:"Configure theme, styled hooks & components"},g={id:"theme-provider",title:"ThemeProvider setup"},v={id:"using-stylish-components",title:"Using stylish components"},S={id:"stylers",title:"Using stylers"},b={id:"using-variables",title:"Using variables"};s.default=function(){return(0,n.jsx)(y.Z,{renderNavigation:function(){return(0,n.jsx)(m.Z,{})},renderContent:function(){return(0,n.jsxs)(o.Fragment,{children:[(0,n.jsx)(i(),{children:(0,n.jsx)("title",{children:"Usage | React Native Stylo"})}),(0,n.jsxs)("article",{children:[(0,n.jsx)(a.Z,{children:"Usage"}),(0,n.jsx)("nav",{className:"p-4 mt-8 mb-4 bg-pink-50 rounded",children:(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"#".concat(j.id),children:j.title})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"#".concat(p.id),children:p.title})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"#".concat(g.id),children:g.title})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"#".concat(v.id),children:v.title})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"#".concat(S.id),children:S.title})}),(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:"#".concat(b.id),children:b.title})})]})}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(x.Z,{id:j.id,level:4,children:j.title}),(0,n.jsx)(u.Z,{children:(0,n.jsx)(d.Z,{children:"npm install --save react-native-stylo"})}),(0,n.jsx)(u.Z,{children:(0,n.jsx)(d.Z,{children:"yarn add react-native-stylo"})})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(x.Z,{id:p.id,level:4,children:p.title}),(0,n.jsxs)(u.Z,{children:["Stylo provides a default theme & its ",(0,n.jsx)(c(),{href:"/tight-coupling",children:"tightly coupled"})," styling elements, ",(0,n.jsx)(c(),{href:"/stylish",children:"Stylish"})," components & ",(0,n.jsx)(c(),{href:"/stylers",children:"Styler"})," hooks, which are located at ",(0,n.jsx)("strong",{className:"font-semibold",children:f.e}),". Just copy the these to your project. You can freely modify the theme as per your needs."]}),(0,n.jsxs)(u.Z,{children:["E.g. ",(0,n.jsxs)(d.Z,{children:["cp -R [root]",f.e," [root]/app/stylo"]})]}),(0,n.jsx)(h.Z,{children:"[root]\n  |- app\n    |- components\n    |- screens\n    |- stylo\n      |- stylers\n      |- stylish\n      |- themes\n        |- types\n        |- default"}),(0,n.jsxs)(u.Z,{children:["You can create your own themes right from scratch. Please refer the ",(0,n.jsx)(c(),{href:"/theme",children:"Theme"})," documentation for more details."]}),(0,n.jsxs)(u.Z,{children:["The need for coping the ",(0,n.jsx)(d.Z,{children:"stylers"})," & ",(0,n.jsx)(d.Z,{children:"stylish"})," directories is explained it the document ",(0,n.jsx)(c(),{href:"/tight-coupling",children:"Tightly coupled"}),". To better understand the tight coupling, we recommend you to first go through the ",(0,n.jsx)(c(),{href:"/core-concept",children:"Core concept"}),", ",(0,n.jsx)(c(),{href:"/theme",children:"Theme"}),", ",(0,n.jsx)(c(),{href:"/stylish",children:"Stylish"})," & ",(0,n.jsx)(c(),{href:"/stylers",children:"Stylers"})," documents."]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(x.Z,{id:g.id,level:4,children:g.title}),(0,n.jsxs)(u.Z,{children:["Wrap the application inside the ",(0,n.jsx)(d.Z,{children:"ThemeProvider"})," and supply the theme to it. The theme is collection of variables & and style definitions. ThemeProvider expects both variables & styles to be supplied to it."]}),(0,n.jsx)(h.Z,{children:"import { ThemeProvider } from 'react-native-stylo';\n\nimport { variables, styles } from './themes/default';\n\nconst App = () => (\n  <ThemeProvider variables={variables} styles={styles}>\n    // Application components\n  </ThemeProvider>\n);"}),(0,n.jsxs)(u.Z,{children:["Please refer the ",(0,n.jsx)(c(),{href:"/theme-provider",children:"<ThemeProvider />"})," documentation for more details."]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(x.Z,{id:v.id,level:4,children:v.title}),(0,n.jsxs)(u.Z,{children:[(0,n.jsx)("strong",{className:"font-semibold",children:"Stylish"})," components are nothing but enhanced React Native components with added properties called ",(0,n.jsx)(d.Z,{children:"styleNames"})," & ",(0,n.jsx)(d.Z,{children:"styleNamespace"}),". Property ",(0,n.jsx)(d.Z,{children:"styleNames"})," accepts the eligible styles for the component which are defined in the theme. Property ",(0,n.jsx)(d.Z,{children:"styleNamespace"})," is optional and use only when you need to override the ",(0,n.jsx)(c(),{href:"/theme#default-namespaces",children:"default StyleNamespaces"}),"."]}),(0,n.jsx)(h.Z,{children:"import React from 'react';\nimport Stylish from '../stylo/stylish';\n\nconst Home = () => (\n  <Stylish.View styleNames={['Screen']}>\n    <Stylish.View styleNames={['Screen.Header', 'Flex.Column', 'Flex.AlignItems.Center', 'Flex.JustifyContent.Center', 'Padding']}>\n      <Stylish.Text styleNames={['H1', 'Align.Center']}>\n        React Native Stylo\n      </Stylish.Text>\n      <Stylish.Text styleNames={['Align.Center']}>\n        Highly composable & scalable themes\n      </Stylish.Text>\n    </Stylish.View>\n    <Stylish.View styleNames={['Screen.Body']}>\n      <Stylish.View styleNames={['List', 'Border', 'Border.Radius', 'Border.Color.Grey2']}>\n        <Stylish.TouchableOpacity styleNames={['List.Item', 'Border.Bottom']} onPress={() => /*some action */}>\n          <Stylish.View styleNames={['List.Item.Left']}>\n            <Stylish.Image styleNames={['Avatar', 'Avatar.Size.Small']} source={...} />\n          </Stylish.View>\n          <Stylish.View styleNames={['List.Item.Body']}>\n            <Stylish.Text>\n              Strongly typed & intellisense friendly styles\n            </Stylish.Text>\n          </Stylish.View>\n        </Stylish.TouchableOpacity>\n        <Stylish.TouchableOpacity styleNames={['List.Item', 'Border.Bottom']} onPress={() => /*some action */}>\n          <Stylish.View styleNames={['List.Item.Left']}>\n            <Stylish.Image styleNames={['Avatar', 'Avatar.Size.Small']} source={...} />\n          </Stylish.View>\n          <Stylish.View styleNames={['List.Item.Body']}>\n            <Stylish.Text>\n              Infinitely scalable\n            </Stylish.Text>\n          </Stylish.View>\n        </Stylish.TouchableOpacity>\n      </Stylish.View>\n    </Stylish.View>\n  </Stylish.View>\n);\n\nexport default Home;"}),(0,n.jsxs)(u.Z,{children:["Please refer the ",(0,n.jsx)(c(),{href:"/stylish",children:"Stylish"})," documentation for more details."]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(x.Z,{id:S.id,level:4,children:S.title}),(0,n.jsxs)(u.Z,{children:[(0,n.jsx)("strong",{className:"font-semibold",children:"Stylers"})," are styling hooks which are used to define the styles for the components. Use these stylers in case you like to use the core React Native components instead of ","Stylo's"," stylish components. The styler hooks accept two arguments ",(0,n.jsx)(d.Z,{children:"styleNames"})," &amp ",(0,n.jsx)(d.Z,{children:"styleNamespace"}),"(optional).; First argument ",(0,n.jsx)(d.Z,{children:"styleNames"})," accepts the eligible styles for the component which are defined in the theme. Second argument ",(0,n.jsx)(d.Z,{children:"styleNamespace"})," is optional, and use only when you need to override the default namespaces."]}),(0,n.jsx)(h.Z,{children:"import React, { useRef } from 'react';\nimport { Image, Text, TouchableOpacity, View } from 'react-native';\nimport { useImageStyles, useTextStyles, useTouchableStyles, useViewStyles } from '../stylo/stylers';\n\nconst Home = () => {\n  const styles = useRef({\n    screen: useViewStyles(['Screen']),\n    screenHeader: useViewStyles(['Screen.Header', 'Flex.Column', 'Flex.AlignItems.Center', 'Flex.JustifyContent.Center', 'Padding']),\n    screenBody: useViewStyles(['Screen.Body']),\n    screenFooter: useViewStyles(['Screen.Footer']),\n    screenTitle: useTextStyles(['H1', 'Align.Center']),\n    screenSubTitle: useTextStyles(['Align.Center']),\n    list: useViewStyles(['List', 'Border', 'Border.Radius', 'Border.Color.Grey2']),\n    listItem: useTouchableStyles(['List.Item', 'Border.Bottom']),\n    listLastItem: useTouchableStyles(['List.Item']),\n    listItemLeft: useViewStyles(['List.Item.Left']),\n    listItemBody: useViewStyles(['List.Item.Body']),\n    listItemAvatar: useImageStyles(['Avatar', 'Avatar.Size.Small']),\n  }).current;\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.screenHeader}>\n        <Text style={styles.screenTitle}>\n          React Native Stylo\n        </Text>\n        <Text style={styles.screenSubTitle}>\n          Highly composable & infinitely scalable themes\n        </Text>\n      </View>\n      <View style={styles.screenBody}>\n        <View style={styles.list}>\n          <TouchableOpacity style={styles.listItem} onPress={()=> /* some action */}>\n            <View style={styles.listItemLeft}>\n              <Image style={styles.listItemAvatar} source={...} />\n            </View>\n            <View style={styles.listItemBody}>\n              <Text>\n                Strongly typed & intellisense friendly styles\n              </Text>\n            </View>\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.listLastItem} onPress={()=> /* some action */}>\n            <View style={styles.listItemLeft}>\n              <Image style={styles.listItemAvatar} source={...} />\n            </View>\n            <View style={styles.listItemBody}>\n              <Text>\n                Infinitely scalable\n              </Text>\n            </View>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default Home;"}),(0,n.jsxs)(u.Z,{children:["Please refer the ",(0,n.jsx)(c(),{href:"/stylers",children:"Stylers"})," documentation for more details."]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(x.Z,{id:b.id,level:4,children:b.title}),(0,n.jsxs)(u.Z,{children:["Variables are the core configuration values which are used to define the themes. Like, colors, paddings, margins etc.\xa0",(0,n.jsx)("strong",{className:"font-semibold",children:"useVariables()"})," hook is used to access the theme configuration values to create your own custom page specific styles."]}),(0,n.jsx)(h.Z,{children:"import { Text, View } from 'react-native';\nimport { useVariables } from '../stylo/stylers';\n\nconst ComponentA = () => {\n  const [\n    paddingLarge,\n    borderRadius,\n    colorPink,\n    colorWhite,\n  ] = useVariables([\n    'Padding.Large',\n    'Border.Radius',\n    'Color.Pink',\n    'Color.White',\n  ]);\n  const styles = useRef(\n    StyleSheet.create({\n      card: {\n        padding: paddingLarge,\n        borderRadius,\n        backgroundColor: colorPink,\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      cardTitle: {\n        fontSize: 24,\n        lineHeight: 32,\n        color: colorWhite,\n      },\n      ...,\n    }),\n  ).current;\n\n  return (\n    <View style={styles.card}>\n      <Text style={styles.cardTitle}>\n        {title goes here}\n      </Text>\n      ...\n    </View>\n  );"}),(0,n.jsxs)(u.Z,{children:["Please refer the ",(0,n.jsx)(c(),{href:"/use-variables",children:"useVariables()"})," documentation for more details."]})]})]})]})}})}}},function(e){e.O(0,[9814,9774,2888,179],(function(){return s=9066,e(e.s=s);var s}));var s=e.O();_N_E=s}]);