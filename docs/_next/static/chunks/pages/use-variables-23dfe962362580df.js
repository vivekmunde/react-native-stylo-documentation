(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2078],{2360:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-variables",function(){return r(3884)}])},1590:function(e,n,r){"use strict";var s=r(5893);r(7294);n.Z=function(e){var n=e.children;return(0,s.jsx)("p",{className:"mb-4 p-4 bg-gray-100 rounded",style:{overflow:"auto",maxHeight:"90vh"},children:(0,s.jsx)("code",{className:"text-black text-xs",style:{whiteSpace:"pre"},children:n})})}},6734:function(e,n,r){"use strict";var s=r(5893);r(7294);n.Z=function(e){var n=e.children;return(0,s.jsx)("small",{children:(0,s.jsx)("code",{className:"text-black bg-gray-100 p-1 rounded",children:n})})}},6900:function(e,n,r){"use strict";var s=r(5893);r(7294);n.Z=function(e){var n=e.children,r=e.className,t=e.style;return(0,s.jsx)("p",{className:"mb-4 ".concat(null!==r&&void 0!==r?r:""),style:t,children:n})}},7687:function(e,n,r){"use strict";var s=r(5893);r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},s=Object.keys(r);"function"===typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),s.forEach((function(n){t(e,n,r[n])}))}return e}n.Z=function(e){var n=e.children,r=e.id,t=e.level,a=function(){return(0,s.jsx)("a",{href:"#".concat(r),children:n})},l={className:"heading",id:r};return 1===t?(0,s.jsx)("h1",i({},l,{children:a()})):2===t?(0,s.jsx)("h2",i({},l,{children:a()})):3===t?(0,s.jsx)("h3",i({},l,{children:a()})):4===t?(0,s.jsx)("h4",i({},l,{children:a()})):(0,s.jsx)("h5",i({},l,{children:a()}))}},747:function(e,n,r){"use strict";var s=r(5893),t=(r(7294),r(1590));n.Z=function(e){var n=e.renderCode,r=e.imageAlt,i=e.imageUrl;return(0,s.jsxs)("div",{className:"grid grid-cols-12 lg:grid-cols-12 lg:grid-gap-4",children:[(0,s.jsx)("div",{className:"col-span-12 md:col-span-7 lg:col-span-7 lg:col-span-8",children:(0,s.jsx)(t.Z,{children:n()})}),(0,s.jsx)("div",{className:"pl-4 pr-4 col-span-12 md:col-span-5 lg:col-span-4",children:(0,s.jsx)("img",{className:"rounded-3xl border-4 border-pink-200 mb-4",alt:r,src:"".concat("/react-native-stylo-documentation","/images/").concat(i)})})]})}},3884:function(e,n,r){"use strict";r.r(n);var s=r(5893),t=r(9008),i=r.n(t),a=r(1664),l=r.n(a),c=r(7294),o=r(3830),d=r(1590),h=r(6734),u=r(4743),g=r(7370),m=r(6900),x=r(7687),f=r(747);n.default=function(){return(0,s.jsx)(u.Z,{renderNavigation:function(){return(0,s.jsx)(g.Z,{})},renderContent:function(){return(0,s.jsxs)(c.Fragment,{children:[(0,s.jsx)(i(),{children:(0,s.jsx)("title",{children:"useVariables() | React Native Stylo"})}),(0,s.jsxs)("article",{children:[(0,s.jsx)(o.Z,{children:"useVariables()"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("strong",{className:"font-semibold",children:"useVariables()"})," hook is used to access the ",(0,s.jsx)(l(),{href:"/theme#variables",children:"Theme Variables"}),". A practical use of the ",(0,s.jsx)(h.Z,{children:"useVariables()"})," hook can be accessing & using the theme variable values to define styles inside the ",(0,s.jsxs)(h.Z,{children:["StyleSheet.create(",")"]})," API."]}),(0,s.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,s.jsx)(x.Z,{id:"type-definition",level:4,children:"Type definition"}),(0,s.jsx)(d.Z,{children:"function useVariables<TVariable extends string>(names: TVariable[]): (string | number)[];"}),(0,s.jsxs)("section",{children:[(0,s.jsx)("h5",{className:"text-base",children:(0,s.jsx)(h.Z,{children:"TVariable"})}),(0,s.jsxs)(m.Z,{children:[(0,s.jsx)(l(),{href:"/theme#type-definitions",children:"Variable"})," type definition defined in the theme."]})]})]}),(0,s.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,s.jsx)(x.Z,{id:"argument",level:4,children:"Argument"}),(0,s.jsxs)("section",{children:[(0,s.jsx)("h5",{className:"text-base",children:(0,s.jsx)(h.Z,{children:"names"})}),(0,s.jsxs)(m.Z,{children:["The variables, values of which need to be returned. E.g. ",(0,s.jsx)(h.Z,{children:"'Color.Primary'"}),", ",(0,s.jsx)(h.Z,{children:"Padding"}),", ",(0,s.jsx)(h.Z,{children:"'Border.Radius'"})," etc."]})]})]}),(0,s.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,s.jsx)(x.Z,{id:"return-value",level:4,children:"Return value"}),(0,s.jsxs)(m.Z,{children:["An array of values. Value in the array can either be of type ",(0,s.jsx)(h.Z,{children:"string"})," or ",(0,s.jsx)(h.Z,{children:"number"}),"."]})]}),(0,s.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,s.jsx)(x.Z,{id:"usage",level:4,children:"Usage"}),(0,s.jsx)(f.Z,{renderCode:function(){return"import React, { useRef } from 'react';\nimport { StyleSheet, View, Text, SafeAreaView } from 'react-native';\nimport Stylers from '../../stylo/stylers';\n\nconst UsageUseVariablesShowCase = () => {\n  const [ padding, paddingLarge, margin, marginLarge, borderRadius, fontColor, fontSize, colorPrimary1, colorWhite ]\n    = Stylers.useVariables([ 'Padding', 'Padding.Large', 'Margin', 'Margin.Large', 'Border.Radius', 'Font.Color', 'Font.Size', 'Color.Primary1', 'Color.White' ]);\n\n  const styles = useRef(\n    StyleSheet.create({\n      screen: { flex: 1, backgroundColor: colorPrimary1.toString(), padding: Number(paddingLarge) },\n      screenHeader: { paddingVertical: Number(paddingLarge) },\n      screenBody: { padding: Number(padding) },\n      text: { color: fontColor.toString(), fontSize: Number(fontSize) },\n      h1: { fontWeight: '500', fontSize: 48, marginBottom: Number(marginLarge) },\n      h2: { fontWeight: '600', fontSize: 32, marginBottom: Number(marginLarge) },\n      paragraph: { marginBottom: Number(margin) },\n      card: { padding: Number(padding), borderRadius: Number(borderRadius), backgroundColor: colorWhite.toString() },\n    }),\n  ).current;\n\n  return (\n    <View style={styles.screen}>\n      <SafeAreaView />\n      <View style={styles.screenHeader}>\n        <Text style={[styles.text, styles.h1]}>Usage</Text>\n      </View>\n      <Text style={[styles.text, styles.h2]}>useVariables()</Text>\n      <View style={styles.card}>\n        <Text style={[styles.text, styles.paragraph]}>\n          Variables are the core configuration values which are used to define the themes. Like, colors, paddings, margins etc.\n        </Text>\n        <Text style={styles.text}>\n          The useVariables() hook is used to access the Theme Variables. A practical use of the useVariables() hook can be accessing & using the theme variable values to define styles inside the StyleSheet.create() API.\n        </Text>\n      </View>\n    </View>\n  );\n};"},imageAlt:"useVariables()",imageUrl:"showcase-use-variables.png"})]})]})]})}})}}},function(e){e.O(0,[9814,529,9774,2888,179],(function(){return n=2360,e(e.s=n);var n}));var n=e.O();_N_E=n}]);