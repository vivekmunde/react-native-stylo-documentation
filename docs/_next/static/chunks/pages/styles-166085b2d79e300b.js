(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[359],{751:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/styles",function(){return s(6071)}])},6734:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(e){var t=e.children;return(0,n.jsx)("small",{children:(0,n.jsx)("code",{className:"text-black bg-gray-100 p-1 rounded",children:t})})}},9122:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(){return(0,n.jsx)("small",{className:"font-light text-red-500",children:"(Required)"})}},747:function(e,t,s){"use strict";var n=s(5893),l=(s(7294),s(1590));t.Z=function(e){var t=e.renderCode,s=e.imageAlt,a=e.imageUrl;return(0,n.jsxs)("div",{className:"grid grid-cols-12 lg:grid-cols-12 lg:grid-gap-4",children:[(0,n.jsx)("div",{className:"col-span-12 md:col-span-7 lg:col-span-7 lg:col-span-8",children:(0,n.jsx)(l.Z,{children:t()})}),(0,n.jsx)("div",{className:"pl-4 pr-4 col-span-12 md:col-span-5 lg:col-span-4",children:(0,n.jsx)("img",{className:"rounded-3xl border-4 border-pink-200",alt:s,src:"".concat("/react-native-stylo-documentation","/images/").concat(a)})})]})}},6071:function(e,t,s){"use strict";s.r(t);var n=s(5893),l=s(9008),a=s.n(l),i=s(1664),r=s.n(i),c=s(7294),y=s(3830),d=s(5740),o=s(1590),S=s(8046),h=s(6734),m=s(4743),x=s(7370),p=s(6900),N=s(9122),T=s(7687),j=s(747);t.default=function(){return(0,n.jsx)(m.Z,{renderNavigation:function(){return(0,n.jsx)(x.Z,{})},renderContent:function(){return(0,n.jsxs)(c.Fragment,{children:[(0,n.jsx)(a(),{children:(0,n.jsxs)("title",{children:["<Styles />"," | React Native Stylo"]})}),(0,n.jsxs)("article",{children:[(0,n.jsx)(y.Z,{children:"<Styles />"}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)("strong",{className:"font-semibold",children:"Styles"})," is a wrapper component which does the same work as that of ",(0,n.jsx)(r(),{href:"/use-styles",children:"useStyles()"})," hook. It internally uses ",(0,n.jsx)(r(),{href:"/use-styles",children:"useStyles()"})," hook."]}),(0,n.jsxs)(d.Z,{children:["Stylo recommends to use the ",(0,n.jsx)(r(),{href:"/stylish",children:"Stylish"})," components & ",(0,n.jsx)(r(),{href:"/stylers",children:"Styler"})," hooks instead of the ",(0,n.jsx)(h.Z,{children:"<Styles />"})," component. In practice, one may not need to use the ",(0,n.jsx)(h.Z,{children:"<Styles />"})," component directly."]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(T.Z,{id:"type-definition",level:4,children:"Type definition"}),(0,n.jsx)(o.Z,{children:"type TProps<\n  TStyleProp,\n  TStyleName extends string,\n  TStyleNamespace extends string\n> = {\n  styleNamespace: TStyleNamespace;\n  styleNames: TStyleName[];\n  children: (style: StyleProp<TStyleProp>) => React.ReactNode;\n};"}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:(0,n.jsx)(h.Z,{children:"TStyleProp"})}),(0,n.jsxs)(p.Z,{children:["Standard React Native stye prop like ",(0,n.jsx)(S.Z,{href:"https://reactnative.dev/docs/text-style-props",children:"TextStyle"}),", ",(0,n.jsx)(S.Z,{href:"https://reactnative.dev/docs/view-style-props",children:"ViewStyle"})," etc."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:(0,n.jsx)(h.Z,{children:"TStyleName"})}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)(r(),{href:"/theme#type-definitions",children:"StyleName type"})," defined in the theme."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:(0,n.jsx)(h.Z,{children:"TStyleNamespace"})}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)(r(),{href:"/theme#type-definitions",children:"StyleNamespace type"})," defined in the theme."]})]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(T.Z,{id:"props",level:4,children:"Props"}),(0,n.jsxs)("section",{children:[(0,n.jsxs)("h5",{className:"text-lg",children:[(0,n.jsx)(h.Z,{children:"styleNamespace"})," ",(0,n.jsx)(N.Z,{})]}),(0,n.jsxs)(p.Z,{children:["The ",(0,n.jsx)(r(),{href:"/theme#style-namespace",children:"StyleNamespace"})," to be used which holds the style definitions for the ",(0,n.jsx)(h.Z,{children:"StyleNames"})," supplied to the hook."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsxs)("h5",{className:"text-lg",children:[(0,n.jsx)(h.Z,{children:"styleNames"})," ",(0,n.jsx)(N.Z,{})]}),(0,n.jsxs)(p.Z,{children:["The ",(0,n.jsx)(r(),{href:"/theme#style-name",children:"StyleNames"})," which define the styles."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsxs)("h5",{className:"text-base",children:[(0,n.jsx)(h.Z,{children:"children"})," ",(0,n.jsx)(N.Z,{})]}),(0,n.jsxs)(p.Z,{children:["A render function, which passes Standard React Native style object (e.g. ",(0,n.jsx)(h.Z,{children:"StyleProp<ViewStyle>"}),") as an argument."]})]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(T.Z,{id:"usage",level:4,children:"Usage"}),(0,n.jsx)(j.Z,{renderCode:function(){return"import React from 'react';\nimport { SafeAreaView, Text, TextStyle, View, ViewStyle } from 'react-native';\nimport { Styles } from 'react-native-stylo';\nimport { TStyleNamespace, TTextStyle, TViewStyle } from '../../stylo/themes/types';\n\nconst StylesShowCase: React.FC = () => (\n  <Styles<ViewStyle, TViewStyle, TStyleNamespace>\n    styleNamespace=\"ViewStyles\"\n    styleNames={['Screen', 'BackgroundColor.Primary1']}>\n    {screenStyle => (\n      <View style={screenStyle}>\n        <SafeAreaView />\n        <Styles<ViewStyle, TViewStyle, TStyleNamespace>\n          styleNamespace=\"ViewStyles\"\n          styleNames={['Screen.Header', 'Padding']}>\n          {screenHeaderStyle => (\n            <React.Fragment>\n              <View style={screenHeaderStyle}>\n                <Styles<TextStyle, TTextStyle, TStyleNamespace>\n                  styleNamespace=\"TextStyles\"\n                  styleNames={['Color.Primary', 'H1', 'Margin.Top.Small', 'Margin.Bottom.Small' ]}>\n                  {screenTitleStyle => (\n                    <Text style={screenTitleStyle}>{'<Styles />'}</Text>\n                  )}\n                </Styles>\n              </View>\n              <Styles<ViewStyle, TViewStyle, TStyleNamespace>\n                styleNamespace=\"ViewStyles\"\n                styleNames={['Screen.Body', 'Padding']}>\n                {screenBodyStyle => (\n                  <View style={screenBodyStyle}>\n                    <Styles<ViewStyle, TViewStyle, TStyleNamespace>\n                      styleNamespace=\"ViewStyles\"\n                      styleNames={['BackgroundColor.White', 'Border.Radius', 'Margin.Bottom.Large']}>\n                      {cardStyle => (\n                        <View style={cardStyle}>\n                          <Styles<ViewStyle, TViewStyle, TStyleNamespace>\n                            styleNamespace=\"ViewStyles\"\n                            styleNames={['Padding.Top', 'Padding.Left', 'Padding.Right']}>\n                            {cardHeaderStyle => (\n                              <View style={cardHeaderStyle}>\n                                <Styles<TextStyle, TTextStyle, TStyleNamespace>\n                                  styleNamespace=\"TextStyles\"\n                                  styleNames={['Large', 'Bold']}>\n                                  {cardTitleStyle => (\n                                    <Text style={cardTitleStyle}>\n                                      Type definition\n                                    </Text>\n                                  )}\n                                </Styles>\n                              </View>\n                            )}\n                          </Styles>\n                          <Styles<ViewStyle, TViewStyle, TStyleNamespace>\n                            styleNamespace=\"ViewStyles\"\n                            styleNames={['Padding']}>\n                            {cardBodyStyle => (\n                              <View style={cardBodyStyle}>\n                                <Styles<TextStyle, TTextStyle, TStyleNamespace>\n                                  styleNamespace=\"TextStyles\"\n                                  styleNames={['Color.Grey8', 'Bold.Semi']}>\n                                  {codeStyle => (\n                                    <Text style={codeStyle}>\n                                      {\n                                        'type TProps<TStyleProp, TStyleName extends string, TStyleNamespace extends string> = { styleNamespace: TStyleNamespace; styleNames: TStyleName[]; children: (style: StyleProp<TStyleProp>) => React.ReactNode; };'\n                                      }\n                                    </Text>\n                                  )}\n                                </Styles>\n                              </View>\n                            )}\n                          </Styles>\n                        </View>\n                      )}\n                    </Styles>\n                  </View>\n                )}\n              </Styles>\n            </React.Fragment>\n          )}\n        </Styles>\n      </View>\n    )}\n  </Styles>\n);"},imageAlt:"<Styles />",imageUrl:"showcase-styles.png"})]})]})]})}})}}},function(e){e.O(0,[9814,3876,9774,2888,179],(function(){return t=751,e(e.s=t);var t}));var t=e.O();_N_E=t}]);