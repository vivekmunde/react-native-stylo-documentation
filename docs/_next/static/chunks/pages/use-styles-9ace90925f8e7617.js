(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4110],{1261:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/use-styles",function(){return s(6755)}])},5740:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(e){var t=e.children;return(0,n.jsx)("blockquote",{className:"p-4 bg-pink-50 rounded mt-8 mb-8",children:(0,n.jsx)("strong",{className:"font-medium",children:t})})}},1590:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(e){var t=e.children;return(0,n.jsx)("p",{className:"mb-4 p-4 bg-gray-100 rounded",style:{overflow:"auto",maxHeight:"90vh"},children:(0,n.jsx)("code",{className:"text-black text-xs",style:{whiteSpace:"pre"},children:t})})}},1947:function(e,t,s){"use strict";var n=s(5893),l=s(7294),a=s(1590),r=s(6900);t.Z=function(){return(0,n.jsxs)(l.Fragment,{children:[(0,n.jsx)(a.Z,{children:"type TStyleNamespace =\n  | 'IconStyles'\n  | 'ImageBackgroundStyles'\n  | 'ImageStyles'\n  | 'SafeAreaViewStyles'\n  | 'ScrollViewStyles'\n  | 'ScrollViewContentContainerStyles'\n  | 'TextInputStyles'\n  | 'TextStyles'\n  | 'TouchableStyles'\n  | 'ViewStyles';"}),(0,n.jsx)(r.Z,{children:(0,n.jsx)("i",{children:(0,n.jsx)("small",{children:"Note: New StyleNamespaces for remaining components will be added soon."})})})]})}},6734:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(e){var t=e.children;return(0,n.jsx)("small",{children:(0,n.jsx)("code",{className:"text-black bg-gray-100 p-1 rounded",children:t})})}},6900:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(e){var t=e.children,s=e.className,l=e.style;return(0,n.jsx)("p",{className:"mb-4 ".concat(null!==s&&void 0!==s?s:""),style:l,children:t})}},9122:function(e,t,s){"use strict";var n=s(5893);s(7294);t.Z=function(){return(0,n.jsx)("small",{className:"font-light text-red-500",children:"(Required)"})}},7687:function(e,t,s){"use strict";var n=s(5893);s(7294);function l(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{},n=Object.keys(s);"function"===typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(s).filter((function(e){return Object.getOwnPropertyDescriptor(s,e).enumerable})))),n.forEach((function(t){l(e,t,s[t])}))}return e}t.Z=function(e){var t=e.children,s=e.id,l=e.level,r=function(){return(0,n.jsx)("a",{href:"#".concat(s),children:t})},i={className:"heading",id:s};return 1===l?(0,n.jsx)("h1",a({},i,{children:r()})):2===l?(0,n.jsx)("h2",a({},i,{children:r()})):3===l?(0,n.jsx)("h3",a({},i,{children:r()})):4===l?(0,n.jsx)("h4",a({},i,{children:r()})):(0,n.jsx)("h5",a({},i,{children:r()}))}},747:function(e,t,s){"use strict";var n=s(5893),l=(s(7294),s(1590));t.Z=function(e){var t=e.renderCode,s=e.imageAlt,a=e.imageUrl;return(0,n.jsxs)("div",{className:"grid grid-cols-12 lg:grid-cols-12 lg:grid-gap-4",children:[(0,n.jsx)("div",{className:"col-span-12 md:col-span-7 lg:col-span-7 lg:col-span-8",children:(0,n.jsx)(l.Z,{children:t()})}),(0,n.jsx)("div",{className:"pl-4 pr-4 col-span-12 md:col-span-5 lg:col-span-4",children:(0,n.jsx)("img",{className:"rounded-3xl border-4 border-pink-200 mb-4",alt:s,src:"".concat("/react-native-stylo-documentation","/images/").concat(a)})})]})}},6755:function(e,t,s){"use strict";s.r(t);var n=s(5893),l=s(9008),a=s.n(l),r=s(1664),i=s.n(r),c=s(7294),o=s(3830),y=s(5740),d=s(1590),h=s(1947),m=s(8046),S=s(6734),x=s(4743),u=s(7370),p=s(6900),N=s(9122),j=s(7687),T=s(747);t.default=function(){return(0,n.jsx)(x.Z,{renderNavigation:function(){return(0,n.jsx)(u.Z,{})},renderContent:function(){return(0,n.jsxs)(c.Fragment,{children:[(0,n.jsx)(a(),{children:(0,n.jsx)("title",{children:"useStyles() | React Native Stylo"})}),(0,n.jsxs)("article",{children:[(0,n.jsx)(o.Z,{children:"useStyles()"}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)(S.Z,{children:(0,n.jsx)("strong",{className:"font-semibold",children:"useStyles()"})})," is core hook which is used by the Stylo library to read styles from theme. It accepts ",(0,n.jsx)(S.Z,{children:"StyleNames"})," & ",(0,n.jsx)(S.Z,{children:"StyleNamespace"})," as its arguments. It then reads the styles defined for those ",(0,n.jsx)(S.Z,{children:"StyleNames"})," under that ",(0,n.jsx)(S.Z,{children:"StyleNamespace"})," in the theme, combines these styles into one & returns the final style, a standard React Native style object."]}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)("strong",{className:"font-semibold",children:"StyleNamespaces"})," are used to organize the style definitions by logically grouping them together. This prevents the style name/style collisions, like ",(0,n.jsx)(S.Z,{children:"Small"})," can have different style definitions for ",(0,n.jsx)(S.Z,{children:"Text"})," & ",(0,n.jsx)(S.Z,{children:"View"})," components. In the code snippet below ",(0,n.jsx)(S.Z,{children:"TextStyles"}),", ",(0,n.jsx)(S.Z,{children:"TextInputStyles"}),", ",(0,n.jsx)(S.Z,{children:"ViewStyles"})," are the StyleNamespaces."]}),(0,n.jsxs)(p.Z,{children:["Stylo considers each React Native component as one StyleNamespace. To keep it simple & easily understandable, Stylo uses a pattern ",(0,n.jsx)(S.Z,{children:"[ReactNativeComponentName]Styles"})," to name the StyleNamespace. The library uses following StyleNamespaces defined for each React Native component."]}),(0,n.jsx)(h.Z,{}),(0,n.jsxs)(y.Z,{children:["Stylo recommends to use the ",(0,n.jsx)(i(),{href:"/stylish",children:"Stylish"})," components & ",(0,n.jsx)(i(),{href:"/stylers",children:"Styler"})," hooks instead of ",(0,n.jsx)(S.Z,{children:"useStyles()"})," hook. The ",(0,n.jsx)(S.Z,{children:"useStyles()"})," hook is used inside all the ",(0,n.jsx)(i(),{href:"/stylish",children:"Stylish"})," components & ",(0,n.jsx)(i(),{href:"/stylers",children:"Styler"})," hooks. So technically, using only this ",(0,n.jsx)(S.Z,{children:"useStyles()"})," hook any style definition defined in the theme can be accessed & applied to the components. In practice, one may not need to use the ",(0,n.jsx)(S.Z,{children:"useStyles()"})," hook directly."]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(j.Z,{id:"type-definition",level:4,children:"Type definition"}),(0,n.jsx)(d.Z,{children:"function useStyles<\n  TStyleProp,\n  TStyleName extends string,\n  TStyleNamespace extends string\n>({ styleNamespace, styleNames }: {\n  styleNamespace: TStyleNamespace;\n  styleNames: TStyleName[];\n}): StyleProp<TStyleProp>"}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:(0,n.jsx)(S.Z,{children:"TStyleProp"})}),(0,n.jsxs)(p.Z,{children:["Standard React Native stye prop like ",(0,n.jsx)(m.Z,{href:"https://reactnative.dev/docs/text-style-props",children:"TextStyle"}),", ",(0,n.jsx)(m.Z,{href:"https://reactnative.dev/docs/view-style-props",children:"ViewStyle"})," etc."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:(0,n.jsx)(S.Z,{children:"TStyleName"})}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)(i(),{href:"/theme#style-name",children:"StyleName type"})," defined in the theme."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:(0,n.jsx)(S.Z,{children:"TStyleNamespace"})}),(0,n.jsxs)(p.Z,{children:[(0,n.jsx)(i(),{href:"/theme#style-namespace",children:"StyleNamespace type"})," defined in the theme."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsx)("h5",{className:"text-base",children:"Return type"}),(0,n.jsxs)(p.Z,{children:["Standard React Native style object. E.g. ",(0,n.jsx)(S.Z,{children:"StyleProp<ViewStyle>"}),"."]})]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(j.Z,{id:"arguments",level:4,children:"Argument"}),(0,n.jsx)(d.Z,{children:"{\n  styleNamespace: TStyleNamespace;\n  styleNames: TStyleName[];\n}"}),(0,n.jsxs)("section",{children:[(0,n.jsxs)("h5",{className:"text-lg",children:[(0,n.jsx)(S.Z,{children:"styleNamespace"})," ",(0,n.jsx)(N.Z,{})]}),(0,n.jsxs)(p.Z,{children:["The ",(0,n.jsx)(i(),{href:"/theme#style-namespace",children:"StyleNamespace"})," to be used which holds the style definitions for the ",(0,n.jsx)(S.Z,{children:"StyleNames"})," supplied to the hook."]})]}),(0,n.jsxs)("section",{children:[(0,n.jsxs)("h5",{className:"text-lg",children:[(0,n.jsx)(S.Z,{children:"styleNames"})," ",(0,n.jsx)(N.Z,{})]}),(0,n.jsxs)(p.Z,{children:["The ",(0,n.jsx)(i(),{href:"/theme#style-name",children:"StyleNames"})," which define the styles."]})]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(j.Z,{id:"return-value",level:4,children:"Return value"}),(0,n.jsxs)(p.Z,{children:["Standard React Native style object. E.g. ",(0,n.jsx)(S.Z,{children:"StyleProp<ViewStyle>"}),"."]})]}),(0,n.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,n.jsx)(j.Z,{id:"usage",level:4,children:"Usage"}),(0,n.jsxs)(p.Z,{children:["Below example shows the use of ",(0,n.jsx)(S.Z,{children:"useStyles()"})," hook to create a styled card."]}),(0,n.jsx)(T.Z,{renderCode:function(){return"import React, { useRef } from 'react';\nimport { SafeAreaView, Text, TextStyle, TouchableOpacity, View, ViewStyle } from 'react-native';\nimport { useStyles } from 'react-native-stylo';\nimport { TStyleNamespace, TTextStyle, TTouchableStyle, TViewStyle } from '../../stylo/themes/types';\n\nconst UseStylesShowCase: React.FC = () => {\n  const styles = useRef({\n    screen: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['Screen', 'BackgroundColor.Primary1'],\n    }),\n    screenHeader: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['Screen.Header', 'Padding'],\n    }),\n    screenTitle: useStyles<TextStyle, TTextStyle, TStyleNamespace>({\n      styleNamespace: 'TextStyles',\n      styleNames: ['Color.Primary', 'H1', 'Margin.Top.Small', 'Margin.Bottom.Small'],\n    }),\n    screenBody: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['Screen.Body', 'Padding'],\n    }),\n    card: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['BackgroundColor.White', 'Border.Radius', 'Margin.Bottom.Large'],\n    }),\n    cardHeader: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['Padding.Top', 'Padding.Left', 'Padding.Right'],\n    }),\n    cardBody: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['Padding'],\n    }),\n    cardFooter: useStyles<ViewStyle, TViewStyle, TStyleNamespace>({\n      styleNamespace: 'ViewStyles',\n      styleNames: ['Padding', 'Border.Top', 'Border.Color.Primary1'],\n    }),\n    cardTitle: useStyles<TextStyle, TTextStyle, TStyleNamespace>({\n      styleNamespace: 'TextStyles',\n      styleNames: ['Large', 'Bold'],\n    }),\n    code: useStyles<TextStyle, TTextStyle, TStyleNamespace>({\n      styleNamespace: 'TextStyles',\n      styleNames: ['Color.Grey7', 'Bold.Semi'],\n    }),\n    description: useStyles<TextStyle, TTextStyle, TStyleNamespace>({\n      styleNamespace: 'TextStyles',\n      styleNames: ['Color.Grey8'],\n    }),\n    footerButton: useStyles<ViewStyle, TTouchableStyle, TStyleNamespace>({\n      styleNamespace: 'TouchableStyles',\n      styleNames: ['Button', 'Border', 'Border.Color.Primary'],\n    }),\n    footerButtonText: useStyles<TextStyle, TTextStyle, TStyleNamespace>({\n      styleNamespace: 'TextStyles',\n      styleNames: ['Color.Primary'],\n    }),\n  }).current;\n\n  return (\n    <View style={styles.screen}>\n      <SafeAreaView />\n      <View style={styles.screenHeader}>\n        <Text style={styles.screenTitle}>useStyles() hook</Text>\n      </View>\n      <View style={styles.screenBody}>\n        <View style={styles.card}>\n          <View style={styles.cardHeader}>\n            <Text style={styles.cardTitle}>Type definition</Text>\n          </View>\n          <View style={styles.cardBody}>\n            <Text style={styles.code}>\n              {\n                'function useStyles<TStyleProp, TStyleName extends string, TStyleNamespace extends string>({ styleNamespace, styleNames }: { styleNamespace: TStyleNamespace; styleNames: TStyleName[]; }): StyleProp<TStyleProp>'\n              }\n            </Text>\n          </View>\n        </View>\n        <View style={styles.card}>\n          <View style={styles.cardBody}>\n            <Text style={styles.description}>\n              useStyles() is main hook which is used by the Stylo library to\n              read styles from theme. It accepts StyleNames & optional\n              StyleNamespace as its arguments. It then reads the styles defined\n              for those StyleNames under that StyleNamespace in the theme,\n              combines these styles into one & returns the final style.\n            </Text>\n          </View>\n          <View style={styles.cardFooter}>\n            <TouchableOpacity style={styles.footerButton}>\n              <Text style={styles.footerButtonText}>Read more ...</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};"},imageAlt:"useStyles()",imageUrl:"showcase-use-styles.png"})]})]})]})}})}}},function(e){e.O(0,[9814,529,9774,2888,179],(function(){return t=1261,e(e.s=t);var t}));var t=e.O();_N_E=t}]);