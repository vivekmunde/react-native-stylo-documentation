(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8593],{6172:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/theme",function(){return t(1116)}])},1590:function(e,n,t){"use strict";var i=t(5893);t(7294);n.Z=function(e){var n=e.children;return(0,i.jsx)("p",{className:"mb-4 p-4 bg-gray-100 rounded",style:{overflow:"auto",maxHeight:"90vh"},children:(0,i.jsx)("code",{className:"text-black text-xs",style:{whiteSpace:"pre"},children:n})})}},1947:function(e,n,t){"use strict";var i=t(5893),l=t(7294),r=t(1590),s=t(6900);n.Z=function(){return(0,i.jsxs)(l.Fragment,{children:[(0,i.jsx)(r.Z,{children:"type TStyleNamespace =\n  | 'IconStyles'\n  | 'ImageBackgroundStyles'\n  | 'ImageStyles'\n  | 'SafeAreaViewStyles'\n  | 'ScrollViewStyles'\n  | 'ScrollViewContentContainerStyles'\n  | 'TextInputStyles'\n  | 'TextStyles'\n  | 'TouchableStyles'\n  | 'ViewStyles';"}),(0,i.jsx)(s.Z,{children:(0,i.jsx)("i",{children:(0,i.jsx)("small",{children:"Note: New StyleNamespaces for remaining components will be added soon."})})})]})}},6734:function(e,n,t){"use strict";var i=t(5893);t(7294);n.Z=function(e){var n=e.children;return(0,i.jsx)("small",{children:(0,i.jsx)("code",{className:"text-black bg-gray-100 p-1 rounded",children:n})})}},6900:function(e,n,t){"use strict";var i=t(5893);t(7294);n.Z=function(e){var n=e.children,t=e.className,l=e.style;return(0,i.jsx)("p",{className:"mb-4 ".concat(null!==t&&void 0!==t?t:""),style:l,children:n})}},7687:function(e,n,t){"use strict";var i=t(5893);t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},i=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),i.forEach((function(n){l(e,n,t[n])}))}return e}n.Z=function(e){var n=e.children,t=e.id,l=e.level,s=function(){return(0,i.jsx)("a",{href:"#".concat(t),children:n})},o={className:"heading",id:t};return 1===l?(0,i.jsx)("h1",r({},o,{children:s()})):2===l?(0,i.jsx)("h2",r({},o,{children:s()})):3===l?(0,i.jsx)("h3",r({},o,{children:s()})):4===l?(0,i.jsx)("h4",r({},o,{children:s()})):(0,i.jsx)("h5",r({},o,{children:s()}))}},1116:function(e,n,t){"use strict";t.r(n);var i=t(5893),l=t(9008),r=t.n(l),s=t(1664),o=t.n(s),a=t(7294),c=t(3830),d=t(1590),h=t(1947),y=t(8046),g=t(6734),m=t(4743),p=t(7370),x=t(6900),f=t(7687);n.default=function(){return(0,i.jsx)(m.Z,{renderNavigation:function(){return(0,i.jsx)(p.Z,{})},renderContent:function(){return(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(r(),{children:(0,i.jsx)("title",{children:"Theme | React Native Stylo"})}),(0,i.jsxs)("article",{children:[(0,i.jsx)(c.Z,{children:"Theme"}),(0,i.jsxs)(x.Z,{children:[(0,i.jsx)("strong",{className:"font-semibold",children:"Theme"})," at core is nothing but a collection of styles defined using the ",(0,i.jsxs)(y.Z,{href:"https://reactnative.dev/docs/stylesheet",children:["React ","Native's"," ",(0,i.jsx)(g.Z,{children:"StyleSheet.create()"})," API"]}),". The themes are defined inside the app and are completely owned by the app, not by the Stylo library. Stylo theme is based on two key concepts: StyleName & StyleNamespace."]}),(0,i.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,i.jsx)(f.Z,{id:"style-name",level:4,children:"StyleName"}),(0,i.jsxs)(x.Z,{children:["StyleName is the name of a standard style definition provided to the ",(0,i.jsx)(g.Z,{children:"StyleSheet.create"})," API. A unified collection of StyleNames & their style definitions results into a Theme. Any suitable naming convention can be used for the StyleNames. A common good practice is to group the style definitions per React Native component."]}),(0,i.jsxs)(x.Z,{children:["In the code snippet below ",(0,i.jsx)(g.Z,{children:"'Align.Center'"}),", ",(0,i.jsx)(g.Z,{children:"H1"}),", ",(0,i.jsx)(g.Z,{children:"Small"})," are the style names."]}),(0,i.jsx)(x.Z,{children:(0,i.jsx)("strong",{className:"font-semibold",children:"Type definition"})}),(0,i.jsx)(d.Z,{children:"type TTextStyle = 'Align.Center' | 'Align.Right' | 'H1' | 'H2' | 'H3' | 'Small' | 'Size.Tiny';\ntype TInputTextStyle = 'Align.Center' | 'Align.Right' | 'Small' | 'Size.Tiny';"}),(0,i.jsxs)(x.Z,{children:["The document explains the significance & usage of the type definitions in the theme in the later section. The StyleName type definitions are passed to & used by ",(0,i.jsx)(o(),{href:"/stylers",children:"Styler"})," hooks & ",(0,i.jsx)(o(),{href:"/stylish",children:"Stylish"})," components. They are not directly used in the ",(0,i.jsx)(g.Z,{children:"StyleSheet.create()"})," API."]}),(0,i.jsx)(x.Z,{children:(0,i.jsx)("strong",{className:"font-semibold",children:"Styles defined using the StyleNames"})}),(0,i.jsx)(d.Z,{children:"const TextStyles = StyleSheet.create({\n  Default: { color: '#000000', fontSize: 16, fontWeight: '400', lineHeight: 24 },\n  'Align.Center': { textAlign: 'center' },\n  'Align.Right': { textAlign: 'right' },\n  H1: { fontSize: 32, fontWeight: '400', lineHeight: 40, marginBottom: 16 },\n  H2: { fontSize: 28, fontWeight: '400', lineHeight: 36, marginBottom: 16 },\n  H3: { fontSize: 24, fontWeight: '400', lineHeight: 32, marginBottom: 8 },\n  Small: { fontSize: 12, lineHeight: 18 },\n  'Size.Tiny': { fontSize: 8, lineHeight: 14 },\n});\n\nconst TextInputStyles = StyleSheet.create({\n  Default: { borderRadius: 8, color: '#000000', fontSize: 16, paddingTop: 12, paddingBottom: 12, paddingLeft: 8, paddingRight: 8 },\n  'Align.Center': { textAlign: 'center' },\n  'Align.Right': { textAlign: 'right' },\n  Small: { fontSize: 12, paddingTop: 8, paddingBottom: 8 },\n  Large: { fontSize: 24, paddingTop: 16, paddingBottom: 16, paddingLeft: 10, paddingRight: 10 },\n});"})]}),(0,i.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,i.jsxs)(f.Z,{id:"reserved-style-name",level:4,children:["Reserved StyleName ",(0,i.jsx)(g.Z,{children:"Default"})]}),(0,i.jsxs)(x.Z,{children:[(0,i.jsx)(g.Z,{children:"Default"})," is a reserved StyleName."," It's"," used for the core React Native components like Text, View, TextInput, Image etc. Stylo applies the styles defined under ",(0,i.jsx)(g.Z,{children:"Default"})," StyleName as a default style to the components."]}),(0,i.jsxs)(x.Z,{children:["In the code snipper below, the style defined as ",(0,i.jsx)(g.Z,{children:"Default"})," will get applied by default to ",(0,i.jsx)(g.Z,{children:"Text"})," component."]}),(0,i.jsx)(d.Z,{children:"const TextStyles = StyleSheet.create({\n  Default: { color: '#000000', fontSize: 16, fontWeight: '400', lineHeight: 24 },\n  H1: { fontSize: 32, fontWeight: '400', lineHeight: 40, marginBottom: 16 },\n  H2: { fontSize: 28, fontWeight: '400', lineHeight: 36, marginBottom: 16 },\n  ...\n});"}),(0,i.jsx)(d.Z,{children:"import { Text } from 'react-native-stylo';\n\nconst ComponentA = () => (\n  <Text>React Native Stylo</Text>\n);"})]}),(0,i.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,i.jsx)(f.Z,{id:"style-namespace",level:4,children:"StyleNamespace"}),(0,i.jsxs)(x.Z,{children:["StyleNamespaces are used to organize the style definitions by logically grouping them together. Means, all style definitions for React ","Native's"," Text component can be grouped together under a namespace called ",(0,i.jsx)(g.Z,{children:"TextStyles"}),", likewise ",(0,i.jsx)(g.Z,{children:"ViewStyles"}),", ",(0,i.jsx)(g.Z,{children:"TouchableStyles"}),", ",(0,i.jsx)(g.Z,{children:"TextInputStyles"})," etc. This prevents collisions of the StyleName & eventually the collisions of styles. For example, a StyleName ",(0,i.jsx)(g.Z,{children:"Small"})," can exist for both Text & View and can have different style definitions for each. So placing these different stye definitions with same StyleName ",(0,i.jsx)(g.Z,{children:"Small"})," under separate namespaces ",(0,i.jsx)(g.Z,{children:"TextStyles"})," & ",(0,i.jsx)(g.Z,{children:"ViewStyles"})," will avoid the collision or accidental overriding of style definitions."]}),(0,i.jsxs)(x.Z,{children:["Stylo considers each React Native component as one StyleNamespace. To keep it simple & easily understandable, Stylo uses a pattern ",(0,i.jsx)(g.Z,{children:"[ReactNativeComponentName]Styles"})," to name the StyleNamespace. The library uses following StyleNamespaces defined for each React Native component."]}),(0,i.jsx)(h.Z,{}),(0,i.jsx)(x.Z,{children:"The styles are defined and assigned to these namespaces. And then are used to define a theme."}),(0,i.jsx)(d.Z,{children:"const TextStyles = StyleSheet.create({ ... });\nconst IconStyles = StyleSheet.create({ ... });\nconst ImageBackgroundStyles = StyleSheet.create({ ... });\n// & so on ...\n\nconst Theme = {\n  TextStyles,\n  IconStyles,\n  ImageBackgroundStyles,\n  ...\n};"}),(0,i.jsxs)(x.Z,{children:["The approach of ",(0,i.jsx)("strong",{className:"font-semibold",children:"one namespace per React Native component"})," makes it highly scalable & easily manageable. New namespaces for remaining or new ReactNative components can be added without impacting existing onces. Stylo uses these namespaces by default."]})]}),(0,i.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,i.jsx)(f.Z,{id:"variables",level:4,children:"Variables"}),(0,i.jsx)(x.Z,{children:"Variables are the core configuration values which are used to define the styles. Like, colors, paddings, margins etc. These variable definitions can look like below."}),(0,i.jsx)(x.Z,{children:(0,i.jsx)("strong",{className:"font-semibold",children:"Type definition"})}),(0,i.jsx)(d.Z,{children:"export type TVariable = \n  | 'Color.Primary'\n  | 'Color.Secondary'\n  | 'Padding'\n  | 'Padding.Small'\n  | 'Padding.Large'\n  | 'Border.Radius';"}),(0,i.jsxs)(x.Z,{children:["The document explains the significance & usage of the type definitions in the theme in the later section. The variables type definitions are passed to & used by ",(0,i.jsx)(o(),{href:"/use-variables",children:"useVariables()"})," hook."]}),(0,i.jsx)(x.Z,{children:(0,i.jsx)("strong",{className:"font-semibold",children:"Variable values"})}),(0,i.jsx)(d.Z,{children:"const variables = {\n  'Color.Primary': '#000000',\n  'Color.Secondary': '#888888',\n  'Border.Radius': 6,\n  Padding: 12,\n  'Padding.Small': 8,\n  'Padding.Large': 24,\n};"})]}),(0,i.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,i.jsx)(f.Z,{id:"type-definitions",level:4,children:"Type definitions"}),(0,i.jsxs)(x.Z,{children:["Thanks to ",(0,i.jsx)(y.Z,{href:"https://www.typescriptlang.org",children:"TypeScript"}),", the ",(0,i.jsx)(g.Z,{children:"StyleNames"})," & ",(0,i.jsx)(g.Z,{children:"Variables"})," are strongly typed. The type definitions are passed to & used by ",(0,i.jsx)(o(),{href:"/use-variables",children:"useVariables()"})," hook, ",(0,i.jsx)(o(),{href:"/stylers",children:"Styler"})," hooks & ",(0,i.jsx)(o(),{href:"/stylish",children:"Stylish"})," components. This completely avoids accidental usage of wrong ",(0,i.jsx)(g.Z,{children:"StyleNames"})," & ",(0,i.jsx)(g.Z,{children:"Variables"}),", out of the box. On top of that, the ",(0,i.jsx)(g.Z,{children:"StyleNames"})," are strongly typed against each React Native component, like ",(0,i.jsx)(g.Z,{children:"View"}),", ",(0,i.jsx)(g.Z,{children:"Text"}),", ",(0,i.jsx)(g.Z,{children:"TouchableOpacity"})," etc. This adds an extra level of strong typing which forces to use only those values which are intended for a particular component."]}),(0,i.jsx)(x.Z,{children:(0,i.jsx)("strong",{className:"font-semibold",children:"Variables type definition"})}),(0,i.jsx)(d.Z,{children:"type TFontColorStyle = 'Color.Primary' | 'Color.Secondary' | 'Color.Info' | 'Color.Warning' | 'Color.Danger' | 'Color.Border' | 'Color.Grey1' | 'Color.Grey2' | 'Color.Grey1' | ... ;\ntype TBackgroundColorStyle = 'BackgroundColor.Primary' | 'BackgroundColor.Secondary' | 'BackgroundColor.Info' | 'BackgroundColor.Warning' | 'BackgroundColor.Danger' | 'BackgroundColor.Grey1' | 'BackgroundColor.Grey2' | 'BackgroundColor.Grey1' | ... ;\ntype TPaddingStyle = 'Padding' | 'Padding.Small' | 'Padding.Large';\ntype TMarginStyle = 'Margin' | 'Margin.Small' | 'Margin.Large';\ntype TBorderStyle = 'Border.Radius' | 'Border.Radius.Small' | 'Border.Radius.Large';\n...\n\nexport type TVariable = TFontColorStyle | TBackgroundColorStyle | TPaddingStyle | TMarginStyle | TBorderStyle | ...;"}),(0,i.jsx)(x.Z,{children:(0,i.jsx)("strong",{className:"font-semibold",children:"StyleName type definition"})}),(0,i.jsx)(d.Z,{children:"type TBorderStyle = 'Border' | 'Border.Top' | 'Border.Right' | 'Border.Bottom' | 'Border.Left' | 'Border.Radius' | 'Border.Radius.Small' | 'Border.Radius.Large' | 'Border.Color.Primary' | 'Border.Color.Secondary' | 'Border.Color.Info' | 'Border.Color.Warning' | 'Border.Color.Danger' | 'Border.Color.Grey1' | 'Border.Color.Grey2' | ...;\nexport type TTextStyle = TFontColorStyle | 'Align.Center' | 'Align.Right' | 'Bold' | 'H1' | 'H2' | 'H3' | 'H4' | 'Small' | 'Large' | 'Paragraph' | 'Margin' | 'Margin.Top' | 'Margin.Right' | 'Margin.Bottom' | 'Margin.Left' | 'Margin.Mini' | 'Margin.Small' | 'Margin.Large' | 'Margin.Top.Small' | 'Margin.Right.Small' | 'Margin.Bottom.Small' | 'Margin.Left.Small' | 'Margin.Top.Mini' | 'Margin.Right.Mini' | 'Margin.Bottom.Mini' | 'Margin.Left.Mini' | 'Margin.Top.Large' | 'Margin.Right.Large' | 'Margin.Bottom.Large' | 'Margin.Left.Large';\nexport type TViewStyle = TBackgroundColorStyle | TPaddingStyle | TMarginStyle | TBorderStyle | ...;\nexport type TTouchableStyle = TBackgroundColorStyle | TPaddingStyle | TMarginStyle | TBorderStyle | 'Button' | 'Button.Small' | 'Button.Large' | 'Button.Round' | 'Button.Circle' | ...;\n..."}),(0,i.jsxs)("section",{children:[(0,i.jsx)("h5",{id:"intellisense-friendly-styles",className:"heading text-lg",children:(0,i.jsx)("a",{href:"#intellisense-friendly-styles",children:"Intellisense friendly styles"})}),(0,i.jsxs)(x.Z,{children:["The ",(0,i.jsx)(g.Z,{children:"Variables"})," & ",(0,i.jsx)(g.Z,{children:"StyleNames"})," are intellisense friendly, it helps you choose correct styles & values."]}),(0,i.jsxs)(x.Z,{children:["E.g. Alignment styles for ",(0,i.jsx)(g.Z,{children:"View"})," & ",(0,i.jsx)(g.Z,{children:"Text"})," are different. As you start typing the alignment styles, the editor intellisense helps you choose correct styles for ",(0,i.jsx)(g.Z,{children:"View"})," & ",(0,i.jsx)(g.Z,{children:"Text"}),"."]}),(0,i.jsxs)("div",{className:"grid grid-cols-1 grid-cols-12 gap-4 mb-4",children:[(0,i.jsx)("img",{className:"border rounded p-2 col-span-12 lg:col-span-11 xl:col-span-10",alt:"Strongly typed styles: View",src:"".concat("/react-native-stylo-documentation","/images/style-names-intellisense-1.png")}),(0,i.jsx)("img",{className:"border rounded p-2 col-span-12 lg:col-span-11 xl:col-span-10",alt:"Strongly typed styles: Text",src:"".concat("/react-native-stylo-documentation","/images/style-names-intellisense-2.png")})]})]})]})]})]})}})}}},function(e){e.O(0,[9814,529,9774,2888,179],(function(){return n=6172,e(e.s=n);var n}));var n=e.O();_N_E=n}]);