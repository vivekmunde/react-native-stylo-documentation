(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[593],{6172:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/theme",function(){return t(1116)}])},3830:function(e,n,t){"use strict";var r=t(5893);t(7294);n.Z=function(e){var n=e.children;return(0,r.jsx)("h1",{className:"font-extralight",children:n})}},1590:function(e,n,t){"use strict";var r=t(5893);t(7294);n.Z=function(e){var n=e.children;return(0,r.jsx)("p",{className:"mb-4 p-4 bg-gray-100 rounded",style:{overflow:"auto"},children:(0,r.jsx)("small",{children:(0,r.jsx)("code",{className:"text-black",style:{whiteSpace:"pre"},children:n})})})}},8046:function(e,n,t){"use strict";var r=t(5893);t(7294);n.Z=function(e){var n=e.href,t=e.children;return(0,r.jsx)("a",{href:n,target:"_blank",rel:"noopener noreferrer",children:t})}},6734:function(e,n,t){"use strict";var r=t(5893);t(7294);n.Z=function(e){var n=e.children;return(0,r.jsx)("small",{children:(0,r.jsx)("code",{className:"text-black bg-gray-100 p-1 rounded",children:n})})}},5603:function(e,n,t){"use strict";var r=t(5893),l=t(9008),i=t.n(l),a=t(1664),s=t.n(a),o=t(1163),d=t(7294),c=function(e){var n=e.children,t=e.href,l=(0,o.useRouter)();return(0,r.jsx)("li",{children:(0,r.jsx)(s(),{href:t,children:(0,r.jsx)("a",{className:l.pathname.toLowerCase()===t.toLowerCase()?"font-medium":"text-gray-800",style:{display:"block"},children:n})})})};n.Z=function(e){var n=e.children;(0,o.useRouter)();return(0,r.jsxs)(d.Fragment,{children:[(0,r.jsxs)(i(),{children:[(0,r.jsx)("title",{children:"React Native Stylo"}),(0,r.jsx)("meta",{name:"description",content:"Completely detached and highly scalable React Native styles"}),(0,r.jsx)("link",{rel:"icon",href:"".concat("/react-native-stylo-documentation","/favicon.ico")})]}),(0,r.jsx)("div",{className:"lg:container lg:mx-auto flex flex-col",children:(0,r.jsxs)("div",{className:"grid grid-cols-7 xl:grid-cols-5 grid-flow-col",children:[(0,r.jsx)("nav",{className:"p-4 col-span-2 xl:col-span-1",children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:(0,r.jsx)("ul",{className:"mt-4 mb-8",children:(0,r.jsx)("li",{children:(0,r.jsx)(s(),{href:"/",children:(0,r.jsxs)("a",{style:{fontSize:"20px",fontWeight:"200",lineHeight:1,whiteSpace:"nowrap",display:"flex",flexDirection:"row",alignItems:"center"},children:[(0,r.jsx)("span",{children:"react-native-"}),(0,r.jsx)("img",{alt:"stylo",src:"".concat("/react-native-stylo-documentation","/logo.png"),style:{height:"28px"}})]})})})})}),(0,r.jsx)("li",{children:(0,r.jsxs)("ul",{className:"mb-8",children:[(0,r.jsx)(c,{href:"/",children:"Core concept"}),(0,r.jsx)(c,{href:"/usage",children:"Usage"})]})}),(0,r.jsxs)("li",{children:[(0,r.jsx)("h5",{className:"text-base",style:{margin:0},children:"Core members"}),(0,r.jsxs)("ul",{className:"mb-8",children:[(0,r.jsx)(c,{href:"/use-styles",children:"useStyles()"}),(0,r.jsx)(c,{href:"/styles",children:"<Styles />"})]})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("h5",{className:"text-base",style:{margin:0},children:"Hooks & components"}),(0,r.jsxs)("ul",{className:"mb-8",children:[(0,r.jsx)(c,{href:"/theme",children:"Theme"}),(0,r.jsx)(c,{href:"/theme-provider",children:"<ThemeProvider />"}),(0,r.jsx)(c,{href:"/use-variables",children:"useVariables()"}),(0,r.jsx)(c,{href:"/stylish",children:"Stylish"}),(0,r.jsx)(c,{href:"/stylers",children:"Stylers"})]})]}),(0,r.jsx)("li",{children:(0,r.jsxs)("ul",{className:"mb-8",children:[(0,r.jsx)(c,{href:"/default-styles",children:"Default styles"}),(0,r.jsx)(c,{href:"/style-names-sequence",children:"StyleNames sequence"}),(0,r.jsx)(c,{href:"/tight-coupling",children:"Tightly coupled"})]})})]})}),(0,r.jsx)("main",{className:"border-l p-4 col-span-5 xl:col-span-4",style:{minHeight:"100vh"},children:n})]})})]})}},6900:function(e,n,t){"use strict";var r=t(5893);t(7294);n.Z=function(e){var n=e.children,t=e.className;return(0,r.jsx)("p",{className:"mb-4 ".concat(t),children:n})}},7687:function(e,n,t){"use strict";var r=t(5893);t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){l(e,n,t[n])}))}return e}n.Z=function(e){var n=e.children,t=e.id,l=e.level,a=function(){return(0,r.jsx)("a",{href:"#".concat(t),children:n})},s={className:"heading",id:t};return 1===l?(0,r.jsx)("h1",i({},s,{children:a()})):2===l?(0,r.jsx)("h2",i({},s,{children:a()})):3===l?(0,r.jsx)("h3",i({},s,{children:a()})):4===l?(0,r.jsx)("h4",i({},s,{children:a()})):(0,r.jsx)("h5",i({},s,{children:a()}))}},1116:function(e,n,t){"use strict";t.r(n);var r=t(5893),l=t(9008),i=t.n(l),a=t(1664),s=t.n(a),o=(t(7294),t(3830)),d=t(1590),c=t(8046),h=t(6734),g=t(5603),y=t(6900),m=t(7687);n.default=function(){return(0,r.jsxs)(g.Z,{children:[(0,r.jsx)(i(),{children:(0,r.jsx)("title",{children:"Theme | React Native Stylo"})}),(0,r.jsxs)("article",{children:[(0,r.jsx)(o.Z,{children:"Theme"}),(0,r.jsxs)(y.Z,{children:[(0,r.jsx)("strong",{className:"font-semibold",children:"Theme"})," at core is nothing but a collection of styles defined using the ",(0,r.jsxs)(c.Z,{href:"https://reactnative.dev/docs/stylesheet",children:["React ","Native's"," ",(0,r.jsx)(h.Z,{children:"StyleSheet.create()"})," API"]}),". The themes are defined inside the app and are completely owned by the app, not by the Stylo library. Stylo theme is based on two key concepts: StyleName & StyleNamespace."]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"style-name",level:4,children:"StyleName"}),(0,r.jsxs)(y.Z,{children:["StyleName is the name of a standard style definition provided to the ",(0,r.jsx)(h.Z,{children:"StyleSheet.create"})," API. A unified collection of StyleNames & their style definitions results into a Theme. Any suitable naming convention can be used for the StyleNames. A common good practice is to group the style definitions per React Native component."]}),(0,r.jsxs)(y.Z,{children:["In the code snippet below ",(0,r.jsx)(h.Z,{children:"'Align.Center'"}),", ",(0,r.jsx)(h.Z,{children:"H1"}),", ",(0,r.jsx)(h.Z,{children:"'Size.Small'"})," are the style names."]}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"Type definition"})}),(0,r.jsx)(d.Z,{children:"type TTextStyle = 'Align.Center' | 'Align.Right' | 'H1' | 'H2' | 'H3' | 'Size.Small' | 'Size.Tiny';\ntype TInputTextStyle = 'Align.Center' | 'Align.Right' | 'Size.Small' | 'Size.Tiny';"}),(0,r.jsxs)(y.Z,{children:["The document explains the significance & usage of the type definitions in the theme in the later section. The StyleName type definitions are passed to & used by ",(0,r.jsx)(s(),{href:"/stylers",children:"Styler"})," hooks & ",(0,r.jsx)(s(),{href:"/stylish",children:"Stylish"})," components. They are not directly used in the ",(0,r.jsx)(h.Z,{children:"StyleSheet.create()"})," API."]}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"Styles defined using the StyleNames"})}),(0,r.jsx)(d.Z,{children:"const TextStyles = StyleSheet.create({\n  Default: { color: '#000000', fontSize: 16, fontWeight: '400', lineHeight: 24 },\n  'Align.Center': { textAlign: 'center' },\n  'Align.Right': { textAlign: 'right' },\n  H1: { fontSize: 32, fontWeight: '400', lineHeight: 40, marginBottom: 16 },\n  H2: { fontSize: 28, fontWeight: '400', lineHeight: 36, marginBottom: 16 },\n  H3: { fontSize: 24, fontWeight: '400', lineHeight: 32, marginBottom: 8 },\n  'Size.Small': { fontSize: 12, lineHeight: 18 },\n  'Size.Tiny': { fontSize: 8, lineHeight: 14 },\n});\n\nconst TextInputStyles = StyleSheet.create({\n  Default: { borderRadius: 8, color: '#000000', fontSize: 16, paddingTop: 12, paddingBottom: 12, paddingLeft: 8, paddingRight: 8 },\n  'Align.Center': { textAlign: 'center' },\n  'Align.Right': { textAlign: 'right' },\n  'Size.Small': { fontSize: 12, paddingTop: 8, paddingBottom: 8 },\n  'Size.Large': { fontSize: 24, paddingTop: 16, paddingBottom: 16, paddingLeft: 10, paddingRight: 10 },\n});"})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsxs)(m.Z,{id:"reserved-style-name",level:4,children:["Reserved StyleName ",(0,r.jsx)(h.Z,{children:"Default"})]}),(0,r.jsxs)(y.Z,{children:[(0,r.jsx)(h.Z,{children:"Default"})," is a reserved StyleName."," It's"," used for the core React Native components like Text, View, TextInput, Image etc. Stylo applies the styles defined under ",(0,r.jsx)(h.Z,{children:"Default"})," StyleName as a default style to the components."]}),(0,r.jsxs)(y.Z,{children:["In the code snipper below, the style defined as ",(0,r.jsx)(h.Z,{children:"Default"})," will get applied by default to ",(0,r.jsx)(h.Z,{children:"Text"})," component."]}),(0,r.jsx)(d.Z,{children:"const TextStyles = StyleSheet.create({\n  Default: { color: '#000000', fontSize: 16, fontWeight: '400', lineHeight: 24 },\n  H1: { fontSize: 32, fontWeight: '400', lineHeight: 40, marginBottom: 16 },\n  H2: { fontSize: 28, fontWeight: '400', lineHeight: 36, marginBottom: 16 },\n  ...\n});"}),(0,r.jsx)(d.Z,{children:"import { Text } from 'react-native-stylo';\n\nconst ComponentA = () => (\n  <Text>React Native Stylo</Text>\n);"})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"namespace",level:4,children:"StyleNamespace"}),(0,r.jsxs)(y.Z,{children:["StyleNamespaces are used to organize the style definitions by logically grouping them together. Means, all style definitions for React ","Native's"," Text component can be grouped together under a namespace called ",(0,r.jsx)(h.Z,{children:"TextStyles"}),", likewise ",(0,r.jsx)(h.Z,{children:"ViewStyles"}),", ",(0,r.jsx)(h.Z,{children:"TouchableStyles"}),", ",(0,r.jsx)(h.Z,{children:"TextInputStyles"})," etc. This prevents collisions of the StyleName & eventually the collisions of styles. For example, a StyleName ",(0,r.jsx)(h.Z,{children:"'Size.Small'"})," can exist for both Text & View and can have different style definitions for each. So placing these different stye definitions with same StyleName ",(0,r.jsx)(h.Z,{children:"'Size.Small'"})," under separate namespaces ",(0,r.jsx)(h.Z,{children:"TextStyles"})," & ",(0,r.jsx)(h.Z,{children:"ViewStyles"})," will avoid the collision or accidental overriding of style definitions."]}),(0,r.jsx)(y.Z,{children:"Stylo considers each React Native component as one StyleNamespace."}),(0,r.jsx)(d.Z,{children:"export type TStyleNamespace =\n  | 'IconStyles'\n  | 'ImageBackgroundStyles'\n  | 'ImageStyles'\n  | 'TextInputStyles'\n  | 'TextStyles'\n  | 'TouchableStyles'\n  | 'ViewStyles';"}),(0,r.jsx)(y.Z,{children:"The styles are defined and assigned to these namespaces. And then are used to define a theme."}),(0,r.jsx)(d.Z,{children:"const TextStyles = StyleSheet.create({ ... });\nconst IconStyles = StyleSheet.create({ ... });\nconst ImageBackgroundStyles = StyleSheet.create({ ... });\n// & so on ...\n\nconst Theme = {\n  TextStyles,\n  IconStyles,\n  ImageBackgroundStyles,\n  ...\n};"}),(0,r.jsxs)(y.Z,{children:["The approach of ",(0,r.jsx)("strong",{className:"font-semibold",children:"one namespace per React Native component"})," makes it highly scalable & easily manageable. New namespaces for remaining or new ReactNative components can be added without impacting existing onces. Stylo uses these namespaces by default."]}),(0,r.jsxs)(y.Z,{children:["However, ","it's"," not mandatory for the apps to follow this naming convention. Apps can use any naming convention to define the StyleNamespaces. If other naming convention is used, then just make sure to pass the correct namespace names to the ",(0,r.jsx)(s(),{href:"/stylers",children:"Styler"})," hooks & ",(0,r.jsx)(s(),{href:"/stylish",children:"Stylish"})," components."]})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"default-namespaces",level:4,children:"Default namespaces"}),(0,r.jsx)(y.Z,{children:"Stylo provides default strongly typed StyleNamespaces."}),(0,r.jsx)(d.Z,{children:"export type TStyleNamespace =\n  | 'IconStyles'\n  | 'ImageBackgroundStyles'\n  | 'ImageStyles'\n  | 'KeyboardAvoidingViewStyles'\n  | 'SafeAreaViewStyles'\n  | 'ScrollViewStyles'\n  | 'TextInputStyles'\n  | 'TextStyles'\n  | 'TouchableStyles'\n  | 'ViewStyles';"}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("i",{children:(0,r.jsx)("small",{children:"Note: New namespaces for remaining components will be added soon."})})})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"variables",level:4,children:"Variables"}),(0,r.jsx)(y.Z,{children:"Variables are the core configuration values which are used to define the styles. Like, colors, paddings, margins etc. These variable definitions can look like below."}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"Type definition"})}),(0,r.jsx)(d.Z,{children:"import { TBackgroundColor } from './background-colors';\nimport { TFontColor } from './font-colors';\n\nexport type TVariables = 'Color.Primary' | 'Color.Secondary' | 'Padding' | 'Padding.Small' | 'Padding.Large' | 'Border.Radius';"}),(0,r.jsxs)(y.Z,{children:["The document explains the significance & usage of the type definitions in the theme in the later section. The variables type definitions are passed to & used by ",(0,r.jsx)(s(),{href:"/use-variables",children:"useVariables()"})," hook."]}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"Variable values"})}),(0,r.jsx)(d.Z,{children:"const variables = {\n  'Color.Primary': '#000000',\n  'Color.Secondary': '#888888',\n  'Border.Radius': 6,\n  Padding: 12,\n  'Padding.Small': 8,\n  'Padding.Large': 24,\n};"})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"type-definitions",level:4,children:"Type definitions"}),(0,r.jsxs)(y.Z,{children:["Thanks to ",(0,r.jsx)(c.Z,{href:"https://www.typescriptlang.org",children:"TypeScript"}),", the ",(0,r.jsx)(h.Z,{children:"StyleNames"}),", ",(0,r.jsx)(h.Z,{children:"StyleNamespaces"})," & ",(0,r.jsx)(h.Z,{children:"Variables"})," are strongly typed. The type definitions are passed to & used by ",(0,r.jsx)(s(),{href:"/use-variables",children:"useVariables()"})," hook, ",(0,r.jsx)(s(),{href:"/stylers",children:"Styler"})," hooks & ",(0,r.jsx)(s(),{href:"/stylish",children:"Stylish"})," components. This completely avoids accidental usage of wrong ",(0,r.jsx)(h.Z,{children:"StyleNames"}),", ",(0,r.jsx)(h.Z,{children:"StyleNamespaces"})," & ",(0,r.jsx)(h.Z,{children:"Variables"}),", out of the box. On top of that, the ",(0,r.jsx)(h.Z,{children:"StyleNames"})," & ",(0,r.jsx)(h.Z,{children:"StyleNamespaces"})," are strongly typed against each React Native component, like ",(0,r.jsx)(h.Z,{children:"View"}),", ",(0,r.jsx)(h.Z,{children:"Text"}),", ",(0,r.jsx)(h.Z,{children:"TouchableOpacity"})," etc. This adds an extra level of strong typing which forces to use only those values which are intended for a particular component."]}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"Variables type definition"})}),(0,r.jsx)(d.Z,{children:"type TFontColor = 'Color.Primary' | 'Color.Secondary' | 'Color.Info' | 'Color.Warning' | 'Color.Danger' | 'Color.Border' | 'Color.Grey1' | 'Color.Grey2' | 'Color.Grey1' | ... ;\ntype TBackgroundColor = 'BackgroundColor.Primary' | 'BackgroundColor.Secondary' | 'BackgroundColor.Info' | 'BackgroundColor.Warning' | 'BackgroundColor.Danger' | 'BackgroundColor.Grey1' | 'BackgroundColor.Grey2' | 'BackgroundColor.Grey1' | ... ;\ntype TPadding = 'Padding' | 'Padding.Small' | 'Padding.Large';\ntype TMargin = 'Margin' | 'Margin.Small' | 'Margin.Large';\ntype TBorder = 'Border.Radius' | 'Border.Radius.Small' | 'Border.Radius.Large';\n...\n\nexport type TVariables = TFontColor | TBackgroundColor | TPadding | TMargin | TBorder | ...;"}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"StyleNamespaces type definition"})}),(0,r.jsx)(d.Z,{children:"export type TStyleNamespace = 'IconStyles' | 'ImageBackgroundStyles' | 'ImageStyles' | 'KeyboardAvoidingViewStyles' | 'SafeAreaViewStyles' | 'ScrollViewStyles' | 'TextInputStyles' | 'TextStyles' | 'TouchableStyles' | 'ViewStyles' | ...;"}),(0,r.jsx)(y.Z,{children:(0,r.jsx)("strong",{className:"font-semibold",children:"StyleName type definition"})}),(0,r.jsx)(d.Z,{children:"type TBorderStyle = 'Border' | 'Border.Top' | 'Border.Right' | 'Border.Bottom' | 'Border.Left' | 'Border.Radius' | 'Border.Radius.Small' | 'Border.Radius.Large' | 'Border.Color.Primary' | 'Border.Color.Secondary' | 'Border.Color.Info' | 'Border.Color.Warning' | 'Border.Color.Danger' | 'Border.Color.Grey1' | 'Border.Color.Grey2' | ...;\n  export type TTextStyle = TFontColor | 'Align.Center' | 'Align.Right' | 'Bold' | 'H1' | 'H2' | 'H3' | 'H4' | 'Small' | 'Large' | 'Paragraph' | 'Margin' | 'Margin.Top' | 'Margin.Right' | 'Margin.Bottom' | 'Margin.Left' | 'Margin.XSmall' | 'Margin.Small' | 'Margin.Large' | 'Margin.Top.Small' | 'Margin.Right.Small' | 'Margin.Bottom.Small' | 'Margin.Left.Small' | 'Margin.Top.XSmall' | 'Margin.Right.XSmall' | 'Margin.Bottom.XSmall' | 'Margin.Left.XSmall' | 'Margin.Top.Large' | 'Margin.Right.Large' | 'Margin.Bottom.Large' | 'Margin.Left.Large';\n  export type TViewStyle = TBackgroundColor | TPadding | TMargin | TBorderStyle | ...;\n  export type TTouchableStyle = TBackgroundColor | TPadding | TMargin | TBorderStyle | 'Button' | 'Button.Small' | 'Button.Large' | 'Button.Round' | 'Button.Circle' | ...;\n..."}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h5",{id:"intellisense-friendly-styles",className:"heading text-lg",children:(0,r.jsx)("a",{href:"#intellisense-friendly-styles",children:"Intellisense friendly styles"})}),(0,r.jsxs)(y.Z,{children:["The ",(0,r.jsx)(h.Z,{children:"Variables"}),", ",(0,r.jsx)(h.Z,{children:"StyleNames"})," & ",(0,r.jsx)(h.Z,{children:"StyleNamespaces"})," are intellisense friendly, it helps you choose correct styles & values."]}),(0,r.jsx)(y.Z,{className:"border rounded p-1",children:(0,r.jsx)("img",{alt:"Strongly typed styles: Text",src:"".concat("/react-native-stylo-documentation","/images/style-names-intellisense-1.png")})}),(0,r.jsx)(y.Z,{className:"border rounded p-1",children:(0,r.jsx)("img",{alt:"Strongly typed styles: View",src:"".concat("/react-native-stylo-documentation","/images/style-names-intellisense-2.png")})})]})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"stylo-themes",level:4,children:"Stylo theme"}),(0,r.jsxs)(y.Z,{children:["Stylo provides a default Theme which is located at ",(0,r.jsx)("strong",{className:"font-semibold",children:"/node_modules/react-native-stylo/lib/stylo/themes"}),". The theme can be simply copied into the app & used as is or freely modified as per the needs. Or simply use the default theme just as a guideline & create your own from scratch."]})]}),(0,r.jsxs)("section",{className:"no-vertical-margin-collapse",children:[(0,r.jsx)(m.Z,{id:"create-theme",level:4,children:"Creating a theme"}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h5",{className:"text-lg",children:"1. Define types"}),(0,r.jsxs)(y.Z,{children:["First things first, define the types for Variables, StyleNamespaces & StyleNames."," It's"," very important to define these types clearly by using a thoughtful naming convention which can offer better scalability and easier maintenance ahead."," It's"," not practically possible to define all the types at once, because the theme may keep growing as the app grows. So always follow the practice of defining the types first and then style definitions, when adding new styles to the theme."]}),(0,r.jsx)(d.Z,{children:"// Variables\ntype TFontColor = 'Color.Primary' | 'Color.Secondary' | 'Color.Info' | 'Color.Warning' | 'Color.Danger' | 'Color.Border' | 'Color.Grey1' | 'Color.Grey2' | 'Color.Grey1' | ... ;\ntype TBackgroundColor = 'BackgroundColor.Primary' | 'BackgroundColor.Secondary' | 'BackgroundColor.Info' | 'BackgroundColor.Warning' | 'BackgroundColor.Danger' | 'BackgroundColor.Grey1' | 'BackgroundColor.Grey2' | 'BackgroundColor.Grey1' | ... ;\ntype TPadding = 'Padding' | 'Padding.Small' | 'Padding.Large';\ntype TMargin = 'Margin' | 'Margin.Small' | 'Margin.Large';\ntype TBorder = 'Border.Radius' | 'Border.Radius.Small' | 'Border.Radius.Large';\nexport type TVariables = TFontColor | TBackgroundColor | TPadding | TMargin | TBorder;\n\n// StyleNamespaces\nexport type TStyleNamespace = 'IconStyles' | 'ImageBackgroundStyles' | 'ImageStyles' | 'KeyboardAvoidingViewStyles' | 'SafeAreaViewStyles' | 'ScrollViewStyles' | 'TextInputStyles' | 'TextStyles' | 'TouchableStyles' | 'ViewStyles';\n  \n// StyleNames\ntype TBorderStyle = 'Border' | 'Border.Top' | 'Border.Right' | 'Border.Bottom' | 'Border.Left' | 'Border.Radius' | 'Border.Radius.Small' | 'Border.Radius.Large' | 'Border.Color.Primary' | 'Border.Color.Secondary' | 'Border.Color.Info' | 'Border.Color.Warning' | 'Border.Color.Danger' | 'Border.Color.Grey1' | 'Border.Color.Grey2' | ...;\nexport type TTextStyle = TFontColor | 'Align.Center' | 'Align.Right' | 'Bold' | 'H1' | 'H2' | 'H3' | 'H4' | 'Small' | 'Large' | 'Paragraph' | 'Margin' | 'Margin.Top' | 'Margin.Right' | 'Margin.Bottom' | 'Margin.Left' | 'Margin.XSmall' | 'Margin.Small' | 'Margin.Large' | 'Margin.Top.Small' | 'Margin.Right.Small' | 'Margin.Bottom.Small' | 'Margin.Left.Small' | 'Margin.Top.XSmall' | 'Margin.Right.XSmall' | 'Margin.Bottom.XSmall' | 'Margin.Left.XSmall' | 'Margin.Top.Large' | 'Margin.Right.Large' | 'Margin.Bottom.Large' | 'Margin.Left.Large';\nexport type TViewStyle = TBackgroundColor | TPadding | TMargin | TBorderStyle | ...;\nexport type TTouchableStyle = TBackgroundColor | TPadding | TMargin | TBorderStyle | 'Button' | 'Button.Small' | 'Button.Large' | 'Button.Round' | 'Button.Circle' | ...;\n// & so on ..."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h5",{className:"text-lg",children:"2. Define Variables"}),(0,r.jsx)(y.Z,{children:"Define the variables with their values. These will be used across the theme to maintain the consistency of style."}),(0,r.jsx)(d.Z,{children:"const variables {\n  'Color.Primary': '#000000',\n  'Color.Secondary': '#888888',\n  'Color.Grey1': '#FEFEFE',\n  'Color.Grey2': '#F4F4F4',\n  ...\n  'Border.Radius': 8,\n  'Border.Radius.Small': 4,\n  'Border.Radius.Large': 16,\n  ...\n  Padding: 16,\n  'Padding.Small': 8,\n  'Padding.Large': 24,\n  ...\n};"})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h5",{className:"text-lg",children:"3. Define styles"}),(0,r.jsx)(y.Z,{children:"A good practice is to define the common styles separately & reuse them. Like, border related styles can be defined separately & can be reused to define styles for View, TouchableOpacity, ScrollView etc."}),(0,r.jsx)(d.Z,{children:"const BorderStyles = StyleSheet.create({\n  Border: {\n    borderColor: Variables['Color.Border'],\n    borderStyle: 'solid',\n    borderWidth: 1,\n  },\n  'Border.Top': {\n    borderColor: Variables['Color.Border'],\n    borderStyle: 'solid',\n    borderTopWidth: 1,\n  },\n  'Border.Right': {\n    borderColor: Variables['Color.Border'],\n    borderRightWidth: 1,\n    borderStyle: 'solid',\n  },\n  'Border.Bottom': {\n    borderBottomWidth: 1,\n    borderColor: Variables['Color.Border'],\n    borderStyle: 'solid',\n  },\n  'Border.Left': {\n    borderColor: Variables['Color.Border'],\n    borderLeftWidth: 1,\n    borderStyle: 'solid',\n  },\n  ...\n};\n\nconst PaddingStyles = StyleSheet.create({\n  Padding: { padding: Variables.Padding },\n  'Padding.Small': { padding: Variables['Padding.Small'] },\n  'Padding.Large': { padding: Variables['Padding.Large'] },\n  ...\n};\n\nconst MarginStyles = StyleSheet.create({\n  Margin: { margin: Variables.Margin },\n  'Margin.Small': { margin: Variables['Margin.Small'] },\n  'Margin.Large': { margin: Variables['Margin.Large'] },\n  ...\n};\n\nexport const TextStyles = StyleSheet.create({\n  ...MarginStyles,\n  Default: { color: Variables['Color.Grey8'], fontSize: 16, fontWeight: '400', lineHeight: 24 },\n  'Align.Center': { textAlign: 'center' },\n  'Align.Right': { textAlign: 'right' },\n  H1: { fontSize: 32, fontWeight: '400', lineHeight: 40, marginBottom: 16 },\n  H2: { fontSize: 28, fontWeight: '400', lineHeight: 36, marginBottom: 16 },\n  H3: { fontSize: 24, fontWeight: '400', lineHeight: 32, marginBottom: 8 },\n  'Size.Small': { fontSize: 12, lineHeight: 18 },\n  'Size.Tiny': { fontSize: 8, lineHeight: 14 },\n  ...\n});\n\nexport const ViewStyles = StyleSheet.create({\n  ...BorderStyles,\n  ...PaddingStyles,\n  ...MarginStyles,\n  ...\n});\n\nexport const TouchableStyles = StyleSheet.create({\n  ...BorderStyles,\n  ...PaddingStyles,\n  ...MarginStyles,\n  Button: {\n    padding: Variables.Padding,\n    borderRadius: Variables['Border.Radius'],\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  'Button.Small': {\n    padding: Variables['Padding.Small'],\n  },\n  'Button.Large': {\n    padding: Variables['Padding.Large'],\n  },\n  ...\n});\n\n// & so on ..."})]}),(0,r.jsxs)("section",{children:[(0,r.jsx)("h5",{className:"text-lg",children:"4. Fuse them in a theme"}),(0,r.jsxs)(y.Z,{children:["Collect all the style definitions into one object which will be used as the theme."," It's"," important to use the same namespaces that have been defined in the types."]}),(0,r.jsx)(d.Z,{children:"const Styles = {\n  TextStyles,\n  TouchableStyles,\n  ViewStyles,\n  ...\n};"})]})]})]})]})}}},function(e){e.O(0,[814,774,888,179],(function(){return n=6172,e(e.s=n);var n}));var n=e.O();_N_E=n}]);